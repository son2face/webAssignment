{"version":3,"file":"drag-provider.js","sourceRoot":"","sources":["../../../../modules/core/providers/drag-provider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAQ3C,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAGzD,IAAa,YAAY;IADzB;QAKW,UAAK,GAAG;YACX,UAAU,EAAE,KAAK;YACjB,UAAU,EAAE,KAAK;SACpB,CAAC;IAwEN,CAAC;IAjEU,qCAAc,GAArB,UAAsB,KAAgB,EAAE,GAAe;QACnD,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;IACvE,CAAC;IAMM,qCAAc,GAArB,UAAsB,KAAgB;QAClC,IAAM,IAAI,GAAG,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAE3D,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAe,CAAC;IAC1C,CAAC;IAMM,gCAAS,GAAhB,UAAiB,MAAyB;QACtC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAMM,kCAAW,GAAlB,UAAmB,QAA2B;QAC1C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAQM,mCAAY,GAAnB,UAAoB,GAAa,EAAE,YAAoB,EAAE,YAAoB;QACzE,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;QACjD,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,KAAK,EAAE,GAAG,EAAE,YAAY,CAAC,CAAC;IAC9D,CAAC;IAMM,+BAAQ,GAAf,UAAgB,KAAmD;QAC/D,IAAI,CAAC,KAAK,gBAAO,IAAI,CAAC,KAAK,EAAK,KAAK,CAAC,CAAC;IAC3C,CAAC;IAMM,+BAAQ,GAAf,UAAgB,GAAW;QACvB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAKM,gCAAS,GAAhB;QACI,IAAI,CAAC,QAAQ,CAAC,EAAC,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAC,CAAC,CAAC;IAC1D,CAAC;IACL,mBAAC;AAAD,CAAC,AA/ED,IA+EC;AA/EY,YAAY;IADxB,UAAU,EAAE;GACA,YAAY,CA+ExB;SA/EY,YAAY","sourcesContent":["import { TagInputComponent } from './../../components/tag-input/tag-input';\nimport { TagModel } from '../accessor';\n\nimport { Injectable } from '@angular/core';\n\nexport declare interface DraggedTag {\n    index: number;\n    tag: TagModel;\n    zone: string;\n}\n\nimport { DRAG_AND_DROP_KEY } from '../../core/constants';\n\n@Injectable()\nexport class DragProvider {\n    private sender: TagInputComponent;\n    private receiver: TagInputComponent;\n\n    public state = {\n        isDragging: false,\n        isDropping: false\n    };\n\n    /**\n     * @name setDraggedItem\n     * @param event\n     * @param tag \n     */\n    public setDraggedItem(event: DragEvent, tag: DraggedTag): void {\n        event.dataTransfer.setData(DRAG_AND_DROP_KEY, JSON.stringify(tag));\n    }\n\n    /**\n     * @name getDraggedItem\n     * @param event \n     */\n    public getDraggedItem(event: DragEvent): DraggedTag {\n        const data = event.dataTransfer.getData(DRAG_AND_DROP_KEY);\n\n        return JSON.parse(data) as DraggedTag;\n    }\n\n    /**\n     * @name setSender\n     * @param sender \n     */\n    public setSender(sender: TagInputComponent): void {\n        this.sender = sender;\n    }\n    \n    /**\n     * @name setReceiver\n     * @param receiver \n     */\n    public setReceiver(receiver: TagInputComponent): void {\n        this.receiver = receiver;\n    }\n\n    /**\n     * @name onTagDropped\n     * @param tag \n     * @param indexDragged \n     * @param indexDropped \n     */\n    public onTagDropped(tag: TagModel, indexDragged: number, indexDropped: number): void {\n        this.onDragEnd();\n\n        this.sender.onRemoveRequested(tag, indexDragged);\n        this.receiver.onAddingRequested(false, tag, indexDropped);\n    }\n\n    /**\n     * @name setState\n     * @param state\n     */\n    public setState(state: {isDragging?: boolean, isDropping?: boolean}): void {\n        this.state = {...this.state, ...state};\n    }\n\n    /**\n     * @name getState\n     * @param key\n     */\n    public getState(key: string): boolean {\n        return this.state[key];\n    }\n\n    /**\n     * @name onDragEnd\n     */\n    public onDragEnd(): void {\n        this.setState({isDragging: false, isDropping: false});\n    }\n}"]}